{"version":3,"sources":["historyx.jpg","trainspotting.jpg","shawshank.jpg","fightclub.jpg","drive.jpg","MovieC.js","spinner.js","MovieList.js","HOC.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MovieCard","Y","Card","className","name","starCount","value","rating","CardImg","top","height","src","image","alt","CardBody","CardTitle","title","Example","Spinner","color","React","Component","LoadingHOC","WrappedComponent","this","props","loading","movies","map","el","MovieC","key","id","tablist","Logo","Logo1","Logo3","Logo4","logo5","App","state","isLoading","setTimeout","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,uC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,kSC4B5BC,EAnBG,SAAC,GAAQ,IAAPC,EAAM,EAANA,EAChB,OAEQ,kBAACC,EAAA,EAAD,CAAMC,UAAU,eACZ,yBAAKA,UAAU,SACnB,kBAAC,IAAD,CACIC,KAAK,QACLC,UAAW,EACXC,MAAOL,EAAEM,SAET,kBAACC,EAAA,EAAD,CAASC,KAAG,EAACC,OAAO,QAAQC,IAAKV,EAAEW,MAAOC,IAAI,mBAC9C,kBAACC,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,KAAYd,EAAEe,W,QClBTC,E,iLAEjB,OACE,6BACE,kBAACC,EAAA,EAAD,CAASC,MAAM,iB,GAJcC,IAAMC,WCY5BC,ECZI,SAACC,GAChB,wLAEO,OAAOC,KAAKC,MAAMC,QAAU,kBAAC,EAAD,MAAa,kBAACH,EAAqBC,KAAKC,WAF3E,EAAM,CAA0BJ,aDWrBC,EAVG,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OAEjB,OACI,yBAAKxB,UAAU,cAEVwB,EAAOC,KAAI,SAAAC,GAAE,OAAI,kBAACC,EAAD,CAAQC,IAAKF,EAAGG,GAAI/B,EAAG4B,W,mDEA/CI,EAAU,CAAC,CAAED,GAAI,YAAazB,OAAQ,IAAKK,MAAOsB,IAAMlB,MAAO,kBAAoB,CAAEgB,GAAI,YAAazB,OAAQ,IAAKK,MAAOuB,IAAOnB,MAAO,uBAC9I,CAAEgB,GAAI,YAAazB,OAAQ,IAAKK,MAAOwB,IAAOpB,MAAO,0BACrD,CAAEgB,GAAI,YAAazB,OAAQ,IAAKK,MAAOyB,IAAOrB,MAAO,eACrD,CAAEgB,GAAI,YAAazB,OAAQ,IAAKK,MAAO0B,IAAOtB,MAAO,YA0BtCuB,E,YAxBb,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXC,WAAW,EACXd,OAAQM,GAJO,E,iFAOE,IAAD,OAClBS,YAAW,kBAAM,EAAKC,SAAS,CAAEF,WAAW,MAAU,O,+BAQtD,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,CAAWuB,QAASF,KAAKgB,MAAMC,UAAWd,OAAQM,S,GAnBxCZ,aCFEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1308f294.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/historyx.4b00deb6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/trainspotting.60df5080.jpg\";","module.exports = __webpack_public_path__ + \"static/media/shawshank.72ad4bdb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fightclub.32e10f4a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/drive.ae8038ae.jpg\";","import React from 'react';\r\nimport StarRatingComponent from 'react-star-rating-component';\r\nimport { Card, CardImg, CardBody,\r\n    CardTitle } from 'reactstrap';\r\n\r\n\r\n\r\n\r\n\r\nconst MovieCard = ({Y}) =>{\r\n    return(\r\n        \r\n            <Card className='col-3 card1'>\r\n                <div className=\" List\"> \r\n            <StarRatingComponent \r\n                name=\"rate1\" \r\n                starCount={5}\r\n                value={Y.rating}\r\n            />\r\n                <CardImg top height=\"300px\" src={Y.image} alt=\"Card image cap\" />\r\n                <CardBody>\r\n                <CardTitle>{Y.title}</CardTitle>\r\n                </CardBody>\r\n                </div>\r\n            </Card>\r\n        \r\n    )\r\n}\r\nexport default MovieCard;","import React from 'react';\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport default class Example extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Spinner color=\"primary\" />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n ;","import React from 'react';\r\nimport MovieC from './MovieC';\r\nimport LoadingHOC from './HOC';\r\n\r\n\r\nconst MovieList = ({ movies }) => {\r\n\r\n    return (\r\n        <div className='list-movie'>\r\n\r\n            {movies.map(el => <MovieC key={el.id} Y={el} />)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingHOC(MovieList);\r\n","import React, { Component } from 'react';\r\nimport Spinner from './spinner';\r\n\r\nconst LoadingHOC = (WrappedComponent) => {\r\n    return class LoadingHOC extends Component {\r\n        render(){\r\n           return this.props.loading ? <Spinner/> : <WrappedComponent {...this.props} />\r\n        }\r\n    }\r\n}\r\n\r\nexport default LoadingHOC;","import React, { Component } from 'react';\nimport './App.css';\nimport Logo1 from './historyx.jpg';\n\nimport Logo from './trainspotting.jpg';\nimport MovieList from './MovieList';\n\nimport Logo3 from './shawshank.jpg';\nimport Logo4 from './fightclub.jpg';\nimport logo5 from './drive.jpg';\nconst tablist = [{ id: 'inception', rating: '5', image: Logo, title: 'Trainspotting ' }, { id: 'inception', rating: '1', image: Logo1, title: ' American History X' },\n{ id: 'inception', rating: '4', image: Logo3, title: ' Shawshank Redemption ' },\n{ id: 'inception', rating: '4', image: Logo4, title: 'Fight Club ' },\n{ id: 'inception', rating: '3', image: logo5, title: ' Drive ' }]\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      movies: tablist\n    }\n  }\n  componentDidMount() {\n    setTimeout(() => this.setState({ isLoading: false }), 3000)\n  }\n\n\n\n\n  render() {\n\n    return (\n      <div className='App'>\n        <MovieList loading={this.state.isLoading} movies={tablist} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}